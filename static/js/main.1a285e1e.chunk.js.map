{"version":3,"sources":["utils/eventEmitter.js","reducers/phoneEle.js","reducers/index.js","utils/rem.js","router/routerMap.jsx","App.js","serviceWorker.js","index.js"],"names":["myEE","eventEmitter","elList","state","action","type","payload","splice","console","log","attr","add","e","del","i","edit","item","appReducers","combineReducers","phoneEle","store","createStore","document","getElementsByTagName","style","fontSize","Math","min","round","documentElement","clientWidth","window","onresize","Home","React","lazy","RouteMap","props","historyListener","on","this","push","bind","history","listen","url","fallback","path","exact","render","to","replace","component","Component","withRouter","App","createBrowserHistory","className","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mIAAA,YACMA,EAAO,IADb,OACiBC,GACFD,O,kJC4BAE,IAzBA,SAAUC,EAAOC,GAI5B,OAHID,IACAA,EAAQ,IAEJC,EAAOC,MACX,IARI,MASA,MAAM,GAAN,mBAAWF,GAAX,CAAiBC,EAAOE,UAE5B,IAZI,MAcA,OADAH,EAAMI,OAAOH,EAAOE,QAAQ,GACrB,YAAIH,GAEf,IAdK,OAkBD,OAFAK,QAAQC,IAAIL,GACZD,EAAMC,EAAOE,QAAQ,IAAII,KAAON,EAAOE,QAAQ,GACxC,YAAIH,GAEf,QACI,OAAOA,IAQZ,IAAMQ,EAAI,SAACC,GACd,MAAO,CAACP,KA/BA,MA+BUC,QAASM,IAElBC,EAAI,SAACC,GACd,MAAO,CAACT,KAnCA,MAmCUC,QAASQ,IAElBC,EAAK,SAACD,EAAEE,GACjB,MAAO,CAACX,KApCC,OAoCUC,QAAS,CAACQ,EAAEE,M,gCCtCnC,mBAIMC,EAAcC,YAAgB,CAChCC,eAGEC,EAAQC,YAAYJ,GAEXG,O,0ECLbE,SAASC,qBAAqB,QAAQ,GAAGC,MAAMC,SAAWC,KAAKC,IAAID,KAAKE,MAAMN,SAASO,gBAAgBC,YAAc,IAAM,IAAK,KAAO,KAGzIC,OAAOC,SAAW,WAChBV,SAASC,qBAAqB,QAAQ,GAAGC,MAAMC,SAAWC,KAAKC,IAAID,KAAKE,MAAMN,SAASO,gBAAgBC,YAAc,IAAM,IAAK,KAAO,O,qMCLnIG,EAAOC,IAAMC,MAAK,kBAAM,uDAExBC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDlC,MAAQ,CACXmC,gBAAiB,MAHF,E,kFAQjB9B,QAAQC,IAAIT,KACZA,IAAKuC,GAAG,OAAQC,KAAKC,KAAKC,KAAKF,S,0CAK/BhC,QAAQC,IAAI+B,MACZA,KAAKH,MAAMM,QAAQC,QAAO,SAAAhC,S,2BAmBvBiC,GACHL,KAAKH,MAAMM,QAAQF,KAAKI,K,+BAKxB,OAEE,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,KAAK,IACLC,OAAK,EACLC,OAAQ,kBAAM,kBAAC,IAAD,CAAUC,GAAG,QAAQC,SAAO,OAG5C,kBAAC,IAAD,CAAOH,OAAK,EAACD,KAAK,QAAQK,UAAWnB,U,GAnDxBC,IAAMmB,WA2DdC,cAAWlB,GC1DLmB,E,2MAEnBZ,QAAUa,c,wEAER,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAUrC,MAAOA,KACf,kBAAC,IAAD,CAAQuB,QAASH,KAAKG,SACpB,kBAAC,EAAD,a,GARqBU,aCIbK,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCXNC,IAASb,OAAO,kBAAC,EAAD,MAAS3B,SAASyC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1a285e1e.chunk.js","sourcesContent":["import eventEmitter from 'events'\r\nconst myEE = new eventEmitter()\r\nexport default myEE","\r\nconst DEL = 'DEL'\r\nconst ADD = 'ADD'\r\nconst EDIT = 'EDIT'\r\n\r\nconst elList = function (state, action) {\r\n    if(!state) {\r\n        state = []\r\n    }\r\n    switch (action.type) {\r\n        case ADD:\r\n            return [...state,action.payload]\r\n            break;\r\n        case DEL: \r\n            state.splice(action.payload,1)\r\n            return [...state]\r\n            break;\r\n        case EDIT: \r\n            // state.splice(action.payload,1)\r\n            console.log(action);\r\n            state[action.payload[0]].attr = action.payload[1]\r\n            return [...state]\r\n            break;\r\n        default:\r\n            return state\r\n            break;\r\n    }\r\n}\r\n\r\n\r\nexport default elList\r\n\r\nexport const add=(e)=>{\r\n    return {type: ADD,payload: e}\r\n}\r\nexport const del=(i)=>{\r\n    return {type: DEL,payload: i}\r\n}\r\nexport const edit=(i,item)=>{\r\n    return {type: EDIT,payload: [i,item]}\r\n}","\r\nimport { createStore, combineReducers } from \"redux\";\r\n\r\nimport phoneEle from './phoneEle'\r\n\r\nconst appReducers = combineReducers({\r\n    phoneEle\r\n})\r\n\r\nconst store = createStore(appReducers)\r\n\r\nexport default store","// 获取可视区域的宽度/750，赋值给html的fontsize\r\n// window.onload = function() {\r\n//   // font-size 最小为12\r\n\r\n// }\r\n(function() {\r\n  document.getElementsByTagName('html')[0].style.fontSize = Math.min(Math.round(document.documentElement.clientWidth / 375 * 50), 120) + 'px'\r\n})()\r\n// 测试用代码\r\nwindow.onresize = function() {\r\n  document.getElementsByTagName('html')[0].style.fontSize = Math.min(Math.round(document.documentElement.clientWidth / 375 * 50), 120) + 'px'\r\n}\r\n","import React, { Suspense } from 'react'\r\nimport { Route, Redirect, Switch, withRouter } from 'react-router-dom'\r\nimport { createBrowserHistory } from 'history'\r\nimport myEE from '@/utils/eventEmitter'\r\n\r\nconst Home = React.lazy(() => import('@/pages/home/Home'))\r\n\r\nclass RouteMap extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      historyListener: null\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    console.log(myEE)\r\n    myEE.on('push', this.push.bind(this))\r\n  }\r\n\r\n  componentDidMount() {\r\n    // 监听url变化 4.29.6\r\n    console.log(this)\r\n    this.props.history.listen(e => {\r\n      // if(window.env=='ali'){\r\n      //     window.my.postMessage({\r\n      //         type: 'url',\r\n      //         val: e.pathname + e.search\r\n      //     })\r\n      // }else if(window.env=='wx'){\r\n      //     window.ws.send(JSON.stringify({\r\n      //         type: '1',\r\n      //         token: localStorage.getItem('token'),\r\n      //         data: {\r\n      //             type: 'url',\r\n      //             val: e.pathname + e.search,\r\n      //         }\r\n      //     }))\r\n      // }\r\n    })\r\n  }\r\n\r\n  push(url) {\r\n    this.props.history.push(url)\r\n  }\r\n\r\n  render() {\r\n    // let history = createBrowserHistory()\r\n    return (\r\n      // <Router history={history}>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Switch>\r\n          <Route\r\n            path=\"/\"\r\n            exact\r\n            render={() => <Redirect to=\"/home\" replace />}\r\n          />\r\n          {/* exact is very important */}\r\n          <Route exact path=\"/home\" component={Home} />\r\n        </Switch>\r\n      </Suspense>\r\n      // </Router>\r\n      // </BrowserRouter>\r\n    )\r\n  }\r\n}\r\nexport default withRouter(RouteMap)\r\n","import React, { Component } from 'react'\r\nimport './App.css'\r\nimport { Router } from 'react-router-dom'\r\nimport { createBrowserHistory } from 'history'\r\nimport { Provider } from 'react-redux'\r\nimport store from './reducers/index'\r\nimport RouteMap from './router/routerMap'\r\n\r\nexport default class App extends Component {\r\n  \r\n  history = createBrowserHistory()\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Provider store={store}>\r\n          <Router history={this.history}>\r\n            <RouteMap />\r\n          </Router>\r\n        </Provider>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport '@/utils/rem.js'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}